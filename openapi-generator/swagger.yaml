openapi: 3.0.0
info:
  description: >-
    This file holds the REST API documentation of the Hollo Event Notifier project.
  version: 1.0.0
  title: Service Search App REST API documentation
  license:
    name:
    url:
tags:
  - name: users
    description: Operations about user
  - name: events
    description: Operations about events
security: # global security constraint
  - cookieAuth: [ ]
paths:
  /users:
    get:
      tags:
        - users
      summary: Provides all user in application
      description: ''
      operationId: getAllUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - users
      summary: Updates existing user in application
      description: ''
      operationId: updateUser
      requestBody:
        description: user credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - users
      summary: Creates new user
      description: ''
      operationId: createUser
      requestBody:
        description: user to create
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
                - type: object
                  required:
                    - password
                  properties:
                    password:
                      type: string
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /users/{id}:
    delete:
      tags:
        - users
      summary: Deletes user with given ID
      description: ''
      operationId: deleteUserById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of user to delete
      responses:
        '204':
          description: event deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /users/login:
    post:
      tags:
        - users
      summary: Logs user into the system
      description: ''
      operationId: login
      security: [ ] # no auth for this endpoint
      requestBody:
        description: user credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '200':
          description: successful operation
          headers:
            Set-Cookie:
              description: >-
                Cookie authentication key for use with the `api_key`
                apiKey authentication.
              schema:
                type: string
                example: TOKEN=abcde12345; Path=/; HttpOnly; Secure;
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid username or password supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/check-token:
    get:
      tags:
        - users
      summary: Checks if the user has valid JWT token in cookie
      description: ''
      operationId: checkToken
      responses:
        '200':
          description: Valid JWT token was sent in cookie
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /events:
    get:
      tags:
        - events
      summary: Provides all events between given start-date and end-date
      description: ''
      operationId: getEvents
      parameters:
        - in: query
          name: startDate
          required: true
          schema:
            type: string
            format: date-time
          description: Start date of time intervall
        - in: query
          name: endDate
          required: true
          schema:
            type: string
            format: date-time
          description: End date of time intervall
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - events
      summary: Create new event
      description: ''
      operationId: createEvent
      requestBody:
        description: event to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /events/{id}:
    get:
      tags:
        - events
      summary: Provides an event with the corresponding id
      description: ''
      operationId: getEventById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of requested event
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - events
      summary: Updates event with given ID
      description: ''
      operationId: updateEventById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of event to update
      requestBody:
        description: event to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - events
      summary: Deletes event with given ID
      description: ''
      operationId: deleteEventById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: UUID of event to delete
      responses:
        '204':
          description: event deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  responses:
    # Generic Error responses
    BadRequest:
      description: The provided request format is not correct
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Invalid or non existing authorization cookie was sent
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    cookieAuth:
      type: apiKey
      name: X-AUTH-TOKEN
      in: cookie
  schemas:
    UserCredentials:
      title: A Users login credentials
      description: These should be provided to obtain JWT token
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    Event:
      title: An Event represented in the application
      description: This DTO represents an event in the dormitory
      type: object
      required:
        - title
        - place
        - organizer
        - hasPoints
        - startDate
        - endDate
      properties:
        title:
          type: string
        place:
          type: string
        organizer:
          type: string
        hasPoints:
          type: boolean
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        link:
          type: string
          format: uri
        id:
          type: string
          format: uuid
    User:
      title: A user represented in the application
      description: This DTo represents a user in the application
      type: object
      required:
        - username
        - email
        - role
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [ SystemAdmin, EventAdmin ]
        id:
          type: string
          format: uuid
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message